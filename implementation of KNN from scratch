# implementation of KNN from scratch
import numpy as np
from collections import Counter

def euclidean_distance(a,b):
  return np.sqrt(np.sum((a-b)**2))

class KNN:
  def __init__(self,k=3):
    self.k=k

  def fit(self,X,y):
    self.X_train=X
    self.y_train=y

  def predict(self,X):
    predicted_labels=[self._predict(x) for x in X]
    return np.array(predicted_labels)

  def _predict(self,x):
    distance=[euclidean_distance(x,x_train) for x_train in self.X_train]
    k_indices=np.argsort(distance)[:self.k]
    k_nearst_labels=[self.y_train[i] for i in k_indices]  
    most_common=Counter(k_nearst_labels).most_common(1)
    return most_common[0][0]
                 
X_train = np.array([[1, 2], [2, 3], [3, 1], [6, 5], [7, 7]])
y_train = np.array([0, 0, 0, 1, 1])

# Test data
X_test = np.array([[2, 2], [5, 5]])

# KNN model बनाना और predictions करना
knn = KNN(k=3)
knn.fit(X_train, y_train)
predictions = knn.predict(X_test)
print("Predictions:", predictions)
